<Project>

  <PropertyGroup>
    <SubsetToLower>$(Subset.ToLowerInvariant())</SubsetToLower>
  </PropertyGroup>

  <!--
    Projects for Arcade to build.

    Supports '/p:Subset=<desired subset string>' dev build argument. If not set, all projects run.
    Otherwise, each subset only runs if it is contained in the desired subset string. Each subset
    listed in the arg should be separated by a '-' to avoid unintended matches.

    Each subset has its own '<subset>ProjectToBuild' items so that a project in the build can depend
    on a whole subset, and the dependency on the subset is disregarded automatically when Subset
    doesn't contain it.

    %(SignPhase): Indicates this project must be built before a certain signing phase. Projects can
      depend on 'signing/stages/Sign<stage>.proj' to wait until all projects that are part of a
      stage are complete. This allows the build to perform complex container signing that isn't
      (can't be?) supported by Arcade's single pass, such as MSIs and bundles:
      https://github.com/dotnet/arcade/issues/388
  -->
  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('corehost'))">
    <CorehostProjectToBuild Include="$(RepoRoot)src\corehost\build.proj" SignPhase="Binaries" />
    <ProjectToBuild Include="@(CorehostProjectToBuild)" />
  </ItemGroup>

  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('managed'))">
    <ManagedProjectToBuild Include="$(RepoRoot)src\managed\**\*.csproj" SignPhase="Binaries" />
    <ManagedProjectToBuild Include="$(RepoRoot)src\pkg\packaging\pack-managed.proj" />
    <ProjectToBuild Include="@(ManagedProjectToBuild)" />
  </ItemGroup>

  <!--
    Build pkgproj/depproj but not sfxproj. sfxproj requires pkgprojs to build their nupkgs first,
    before Restore, which doesn't seem supported by Arcade.
  -->
  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('depproj'))">
    <DepprojProjectToBuild Include="$(RepoRoot)src\pkg\projects\**\*.depproj" SignPhase="Binaries" />
    <ProjectToBuild Include="@(DepprojProjectToBuild)" />
  </ItemGroup>

  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('pkgproj'))">
    <PkgprojProjectToBuild Include="$(RepoRoot)src\pkg\projects\**\*.pkgproj" SignPhase="MsiFiles" />
    <ProjectToBuild Include="@(PkgprojProjectToBuild)" />
  </ItemGroup>

  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('installer'))">
    <InstallerProjectToBuild Include="$(RepoRoot)src\pkg\packaging\installers.proj" />
    <ProjectToBuild Include="@(InstallerProjectToBuild)" />
  </ItemGroup>

  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('test'))">
    <TestProjectToBuild Include="$(RepoRoot)src\test\BundleTests\AppHost.Bundle.Tests\AppHost.Bundle.Tests.csproj" />
    <TestProjectToBuild Include="$(RepoRoot)src\test\BundleTests\Microsoft.NET.HostModel.Bundle.Tests\Microsoft.NET.HostModel.Bundle.Tests.csproj" />
    <TestProjectToBuild Include="$(RepoRoot)src\test\HostActivation.Tests\HostActivation.Tests.csproj" />
    <TestProjectToBuild Include="$(RepoRoot)src\test\Microsoft.DotNet.CoreSetup.Packaging.Tests\Microsoft.DotNet.CoreSetup.Packaging.Tests.csproj" />
    <TestProjectToBuild Include="$(RepoRoot)src\test\Microsoft.Extensions.DependencyModel.Tests\Microsoft.Extensions.DependencyModel.Tests.csproj" />
    <ProjectToBuild Include="@(TestProjectToBuild)" />
  </ItemGroup>

  <!-- Special subset only built when demanded directly: regenerates the readme table. -->
  <ItemGroup Condition="$(SubsetToLower.Contains('regeneratereadmetable'))">
    <ProjectToBuild Include="$(RepoRoot)tools-local\regenerate-readme-table.proj" />
  </ItemGroup>

  <!--
    Prevent Arcade fallback to use the VS solution file. If we hit this situation, the user probably
    misspelled the Subset string and we should stop the build from happening.
  -->
  <ItemGroup Condition="'@(ProjectToBuild)' == ''">
    <ProjectToBuild Include="$(MSBuildThisFileDirectory)ShowNoProjectToBuildError.proj" />
  </ItemGroup>

  <PropertyGroup>
    <RepoTasksDir>$(RepoRoot)tools-local\tasks\</RepoTasksDir>
    <RepoTasksOutputFile>$(ArtifactsObjDir)core-setup.tasks\$(Configuration)\build-semaphore.txt</RepoTasksOutputFile>
  </PropertyGroup>

  <!--
    Use this extensibility point to build custom tasks during Build.proj, before any restoring or
    building happens in the repo. These DLLs would ideally live in Arcade and be restored as tools,
    so the idea is building them here is somewhat equivalent.

    Also create the host RID props file so the main build can use it statically.

    Use synthetic inputs/outputs to avoid building it all the time. This should let devs build with
    MSBuild node reuse enabled (the Arcade default). If it were built every time, it would hit file
    locking issues vs. the persistent nodes that loaded the task DLL for the previous build. It
    isn't particularly accurate, but better than nothing.
  -->
  <Target Name="BuildRepoTasks"
          DependsOnTargets="GetRepoTasksSrc"
          BeforeTargets="Execute"
          Inputs="@(RepoTasksSrc)"
          Outputs="$(RepoTasksOutputFile)">
    <MSBuild
      Projects="$(RepoTasksDir)core-setup.tasks.csproj"
      Properties="RepoRoot=$(RepoRoot)"
      Targets="
        Restore;
        Build;
        CreateHostMachineInfoFile"/>
    
    <WriteLinesToFile
      File="$(RepoTasksOutputFile)"
      Lines="$(RepoTasksOutputFile)"
      Overwrite="true" />
  </Target>

  <Target Name="GetRepoTasksSrc">
    <ItemGroup>
      <RepoTasksSrc Include="$(RepoTasksDir)**\*.cs" />
    </ItemGroup>
  </Target>

</Project>
