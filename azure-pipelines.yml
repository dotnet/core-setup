trigger:
- master

variables:
  - name: TeamName
    value: dotnet-core-acquisition
  # Skip Running CI tests
  - name: SkipTests
    value: true
  # Set build as stable to remove build number from package names, used for milestone builds
  - name: IsStable
    value: false
  # Set Official Build Id
  - name: OfficialBuildId
    value: $(Build.BuildNumber)
  # Produce Test build for PR and Public builds
  - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
    - name: SignType
      value: test
  # Set variables only for Official build from internal
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - name: SignType
      value: real
    # PublishType : nopublishtype used for publishing to dotnetblob feed, dotnet myget and symbol server. 
    - name: PublishType
      value: nopublishtype

    # Variable groups
    - group: DotNet-Blob-Feed
    - group: DotNet-Symbol-Server-Pats
    # Used for publishing individual leg assets to azure blobstorage
    - group: DotNet-DotNetCli-Storage
    # Used for publishing to myget
    - group: DotNet-MyGet-Publish
    # Used for dotnet/versions update
    - group: DotNet-Versions-Publish

    # BlobFeed update
    - name: _PublishBlobFeedUrl
      value: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
    - name: _BlobFeedArgs
      value: /p:PackagesUrl=$(_PublishBlobFeedUrl)
        /p:SymbolPackagesUrl=$(_PublishBlobFeedUrl)
        /p:TransportFeedAccessToken=$(dotnetfeed-storage-access-key-1)

    # Symbol Server update
    - name: _SymbolServerPath
      value: https://microsoftpublicsymbols.artifacts.visualstudio.com/DefaultCollection
    - name: _SymbolServerArgs
      value: /p:SymbolServerPath=$(_SymbolServerPath)
         /p:SymbolServerPAT=$(microsoft-symbol-server-pat)
         /p:SymbolExpirationInDays=365

    # ******** Official values *****
    - name: _CommonPublishArgs
      value: /p:AzureAccountName=dotnetcli
        /p:ContainerName=dotnet
        /p:AzureAccessToken=$(dotnetcli-storage-key)
        /p:ChecksumAzureAccountName=dotnetclichecksums
        /p:ChecksumContainerName=dotnet
        /p:ChecksumAzureAccessToken=$(dotnetclichecksums-storage-key)
    # Used for publishing to dotnet myget account
    - name: MyGetApiKey
      value: $(dotnet-myget-org-api-key )
    - name: MyGetFeedUrl
      value: https://dotnet.myget.org/F/dotnet-core/api/v2/package
    - name: MyGetSymbolsFeedUrl
      value: https://dotnet.myget.org/F/dotnet-core/symbols/api/v2/package
    - name: _NugetFeedArgs
      value: /p:NuGetFeedUrl=$(MyGetFeedUrl)
        /p:NuGetSymbolsFeedUrl=$(MyGetSymbolsFeedUrl)
        /p:NuGetApiKey=$(MyGetApiKey)
jobs:
# Platform: Linux 
- template: /eng/jobs/linux-build.yml
  parameters:
    Jobs:
    # Linux glibc X64 leg
    - job: 
      displayName: Linux_x64_glibc
      agentOS: Linux
      variables:
        RunArguments: docker run --privileged --rm
          --name centos-7-d485f41-20173404063424
          -v "$(SourcesDirectory):/root/coresetup"
          -w="/root/coresetup"
          -e "PACKAGEVERSIONPROPSURL=$(PackageVersionPropsUrl)"
          microsoft/dotnet-buildtools-prereqs:centos-7-d485f41-20173404063424
        BuildArguments: -OfficialBuildId=$(OfficialBuildId)
          -ConfigurationGroup=$(_BuildConfiguration)
          -PortableBuild=true
          -strip-symbols
          -SkipTests=$(SkipTests)
          -- /p:StabilizePackageVersion=$(IsStable)
        PublishArguments: /p:PublishType=$(PublishType)
          /p:TargetArchitecture=x64
          /p:ConfigurationGroup=$(_BuildConfiguration)
          /p:PortableBuild=true
          /p:OSGroup=Linux
          /p:StabilizePackageVersion=$(IsStable)
        _TargetArchitecture: x64
        _AdditionalMSBuildArguments: /p:StabilizePackageVersion=$(IsStable)
        _CrossBuildArgs: ''
      packageDistroListDeb: [debian.8,debian.9,ubuntu.16.04,ubuntu.18.04]
      packageDistroListRpm: [centos.7,fedora.27,opensuse.42,oraclelinux.7,sles.12]
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-external-temp
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

    # Linux Arm64
    - job:
      agentOS: Linux
      displayName: Linux_Arm64
      variables:
        RunArguments: docker run --privileged --rm -e ROOTFS_DIR=/crossrootfs/arm64
          --name ubuntu-16.04-cross-arm64-a3ae44b-20180316023254
          -v "$(SourcesDirectory):/root/coresetup"
          -w="/root/coresetup"
          -e "PACKAGEVERSIONPROPSURL=$(PackageVersionPropsUrl)"
          microsoft/dotnet-buildtools-prereqs:ubuntu-16.04-cross-arm64-a3ae44b-20180316023254
        BuildArguments: -OfficialBuildId=$(OfficialBuildId)
          -ConfigurationGroup=$(_BuildConfiguration)
          -PortableBuild=true
          -strip-symbols
          -SkipTests=true
          -CrossBuild=true
          -TargetArchitecture=arm64
          -- /p:StabilizePackageVersion=$(IsStable)
        PublishArguments: /p:PublishType=$(PublishType)
          /p:TargetArchitecture=arm64
          /p:ConfigurationGroup=$(_BuildConfiguration)
          /p:PortableBuild=true
          /p:OSGroup=Linux
          /p:StabilizePackageVersion=$(IsStable)
        _TargetArchitecture: arm64
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-external-temp
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

    # Linux Arm
    - job: 
      agentOS: Linux
      displayName: Linux_Arm
      variables:
        RunArguments: docker run --privileged --rm -e ROOTFS_DIR=/crossrootfs/arm
          --name ubuntu-14.04-cross-e435274-20180323032140
          -v "$(SourcesDirectory):/root/coresetup"
          -w="/root/coresetup"
          -e "PACKAGEVERSIONPROPSURL=$(PackageVersionPropsUrl)"
          microsoft/dotnet-buildtools-prereqs:ubuntu-14.04-cross-e435274-20180323032140
        BuildArguments: -OfficialBuildId=$(OfficialBuildId)
          -ConfigurationGroup=$(_BuildConfiguration)
          -PortableBuild=true
          -strip-symbols
          -SkipTests=true
          -CrossBuild=true
          -TargetArchitecture=arm
          -- /p:StabilizePackageVersion=$(IsStable)
        PublishArguments: /p:PublishType=$(PublishType)
          /p:TargetArchitecture=arm
          /p:ConfigurationGroup=$(_BuildConfiguration)
          /p:PortableBuild=true
          /p:OSGroup=Linux
          /p:StabilizePackageVersion=$(IsStable)
        _TargetArchitecture: arm
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-external-temp
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

    # Linux Alpine 3.6
    - job:
      agentOS: Linux
      displayName: Linux_x64_Alpine36
      variables:
        RunArguments: docker run --privileged --rm
          --name alpine-3.6-3148f11-20171119021156
          -v "$(SourcesDirectory):/root/coresetup"
          -w="/root/coresetup"
          -e "PACKAGEVERSIONPROPSURL=$(PackageVersionPropsUrl)"
          microsoft/dotnet-buildtools-prereqs:alpine-3.6-3148f11-20171119021156
        BuildArguments: -OfficialBuildId=$(OfficialBuildId)
          -ConfigurationGroup=$(_BuildConfiguration)
          -TargetArchitecture=x64
          -PortableBuild=false
          -strip-symbols
          -SkipTests=$(SkipTests)
          -- /p:StabilizePackageVersion=$(IsStable)
          /p:OutputRid=linux-musl-x64
        PublishArguments: /p:PublishType=$(PublishType)
          /p:TargetArchitecture=x64
          /p:ConfigurationGroup=$(_BuildConfiguration)
          /p:PortableBuild=false
          /p:OSGroup=Linux
          /p:OutputRid=linux-musl-x64
          /p:StabilizePackageVersion=$(IsStable)
        _TargetArchitecture: x64
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-external-temp
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

    # Linux Rhel6
    - job:
      agentOS: Linux
      displayName: Linux_x64_Rhel6
      variables:
        RunArguments: docker run --privileged --rm
          --name centos-6-376e1a3-20174311014331
          -v "$(SourcesDirectory):/root/coresetup"
          -w="/root/coresetup"
          -e "PACKAGEVERSIONPROPSURL=$(PackageVersionPropsUrl)"
          microsoft/dotnet-buildtools-prereqs:centos-6-376e1a3-20174311014331
        BuildArguments: -OfficialBuildId=$(OfficialBuildId)
          -ConfigurationGroup=$(_BuildConfiguration)
          -TargetArchitecture=x64
          -PortableBuild=false
          -strip-symbols
          -SkipTests=$(SkipTests)
          -- /p:StabilizePackageVersion=$(IsStable)
          /p:OutputRid=rhel.6-x64
        PublishArguments: /p:PublishType=$(PublishType)
          /p:TargetArchitecture=x64
          /p:ConfigurationGroup=$(_BuildConfiguration)
          /p:PortableBuild=false
          /p:OSGroup=Linux
          /p:OutputRid=rhel.6-x64
          /p:StabilizePackageVersion=$(IsStable)
        _TargetArchitecture: x64
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-external-temp
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dnceng-linux-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

    # TODO : FreeBSD building is not supported in Azure DevOps for now.
    # - job:
    #   agentOS: FreeBSD
    #   displayName: Linux_x64_FreeBSD
    #   variables:
    #     RunArguments: export DotNetBootstrapCliTarPath=/dotnet-sdk-freebsd-x64.tar &&
    #     BuildArguments: -OfficialBuildId=$(OfficialBuildId)
    #         -ConfigurationGroup=$(_BuildConfiguration)
    #         -PortableBuild=true -strip-symbols
    #         -SkipTests=true
    #         -- /p:StabilizePackageVersion=$(IsStable)
    #     PublishArguments: /p:PublishType=$(PublishType)
    #       /p:TargetArchitecture=x64
    #       /p:ConfigurationGroup=$(_BuildConfiguration)
    #       /p:PortableBuild=true
    #       /p:OSGroup=FreeBSD
    #       /p:StabilizePackageVersion=$(IsStable)
    #     _TargetArchitecture: x64
    #   pool:
    #     name: DotNetCore-Infra
    #     demands:
    #       - agent.os -equals FreeBSD
    #   strategy:
    #     maxParallel: 2
    #     matrix: 
    #       debug:
    #         _BuildConfiguration: Debug
    #       release:
    #         _BuildConfiguration: Release

# Platform: Windows
- template: /eng/jobs/windows-build.yml
  parameters:
    Jobs:
    # Windows x64
    - job:
      displayName: Windows_x64
      agentOS: Windows
      variables:
          _AdditionalMSBuildArguments: "/p:SkipTests=$(SkipTests)  /p:StabilizePackageVersion=$(IsStable)"
          _BuildFullPlatformManifest: true
          _PortableBuild: true
          _PublishRidAgnosticPackages: true
          _TargetArchitecture: x64
      pool:
        # For public or PR jobs, use the hosted pool.  For internal jobs use the internal pool.
        # Will eventually change this to two BYOC pools.
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCorePublic-Int-Pool
          queue: Windows.10.Amd64.Open
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dotnet-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

    # Windows x86
    - job:
      displayName: Windows_x86
      agentOS: Windows
      variables:
          _AdditionalMSBuildArguments: "/p:SkipTests=$(SkipTests)  /p:StabilizePackageVersion=$(IsStable)"
          _BuildFullPlatformManifest: false
          _PortableBuild: true
          _PublishRidAgnosticPackages: false
          _TargetArchitecture: x86
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCorePublic-Int-Pool
          queue: Windows.10.Amd64.Open
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dotnet-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

    # Windows Arm64
    - job:
      displayName: Windows_Arm64
      agentOS: Windows
      variables:
        _AdditionalMSBuildArguments: "/p:SkipTests=true  /p:StabilizePackageVersion=$(IsStable)"
        _PortableBuild: true
        _TargetArchitecture: arm64
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCorePublic-Int-Pool
          queue: Windows.10.Amd64.Open
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dotnet-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

    # Windows Arm
    - job:
      displayName: Windows_Arm
      agentOS: Windows
      variables:
        _AdditionalMSBuildArguments: "/p:SkipTests=true  /p:StabilizePackageVersion=$(IsStable)"
        _PortableBuild: true
        _TargetArchitecture: arm
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCorePublic-Int-Pool
          queue: Windows.10.Amd64.Open
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dotnet-internal-temp
      strategy:
        maxParallel: 2
        matrix: 
          debug:
            _BuildConfiguration: Debug
          release:
            _BuildConfiguration: Release

# Platform: OSX
- template: /eng/jobs/osx-build.yml
  parameters:
    pool:
      ${{ if eq(variables['System.TeamProject'], 'public') }}:
        name: Hosted macOS
      ${{ if ne(variables['System.TeamProject'], 'public') }}:
        name: Hosted Mac internal
    strategy:
      maxParallel: 5
      matrix: 
        OSX-x64-debug:
          _AdditionalBuildArguments: "-PortableBuild=true -strip-symbols -SkipTests=$(SkipTests)"
          _AdditionalMSBuildArguments: " /p:StabilizePackageVersion=$(IsStable)"
          _BuildConfiguration: Debug
          _PortableBuild: true
        OSX-x64-release:
          _AdditionalBuildArguments: "-PortableBuild=true -strip-symbols -SkipTests=$(SkipTests)"
          _AdditionalMSBuildArguments: " /p:StabilizePackageVersion=$(IsStable)"
          _BuildConfiguration: Release
          _PortableBuild: true
          _TargetArchitecture: x64

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  # Signing Validation
  - template: /eng/jobs/validate-signing.yml
    parameters:
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCorePublic-Int-Pool
          queue: Windows.10.Amd64.Open
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: dotnet-internal-temp
      dependsOn: 
          - Linux_x64_glibc
          - Linux_Arm64
          - Linux_Arm
          - Linux_x64_Alpine36
          # - Linux_x64_FreeBSD
          - Linux_x64_Rhel6
          - Windows_x64
          - Windows_x86
          - Windows_Arm
          - Windows_Arm64
          - OSX
  # Finalize Publish 
  - template: /eng/jobs/finalize-publish.yml
    parameters:
      Jobs:
      - job: 
        displayName: Finalize_Publish
        dependsOn: 
        - Linux_x64_glibc
        - Linux_Arm64
        - Linux_Arm
        - Linux_x64_Alpine36
        # - Linux_x64_FreeBSD
        - Linux_x64_Rhel6
        - Windows_x64
        - Windows_x86
        - Windows_Arm
        - Windows_Arm64
        - OSX
        pool:
          # For public or PR jobs, use the hosted pool.  For internal jobs use the internal pool.
          # Will eventually change this to two BYOC pools.
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            name: NetCorePublic-Int-Pool
            queue: Windows.10.Amd64.Open
          ${{ if ne(variables['System.TeamProject'], 'public') }}:
            name: dotnet-internal-temp
        variables:
          _TargetArchitecture: x64
          _BuildConfiguration: Release

  # Publish to B.A.R
  - template: /eng/common/templates/job/publish-build-assets.yml
    parameters:
      pool:
        name: dotnet-internal-temp
      dependsOn:
        - Finalize_Publish