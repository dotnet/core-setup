<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Include common targets for specific project types. These files include BuildTools target
    overrides that shouldn't be applied to other projects.
  -->
  <Import Project="framework.dependency.targets" Condition="'$(MSBuildProjectExtension)' == '.depproj'" />
  <Import Project="framework.packaging.targets" Condition="'$(MSBuildProjectExtension)' == '.pkgproj'" />
  <Import Project="framework.sharedfx.targets" Condition="'$(MSBuildProjectExtension)' == '.sfxproj'" />

  <Import Project="installer.targets" />

  <!-- Required by Common.Targets but not used by packaging projects. -->
  <Target Name="CreateManifestResourceNames" />
  <Target Name="CoreCompile" />

  <!--
    Set up properties for installer file. These depend on properties defined in the project file.
    (Unlike properties set up in packaging-tools.props, which shouldn't.)
  -->
  <Target Name="GetInstallerProperties"
          DependsOnTargets="
            GetInstallerBrandingNames;
            GetProductVersions">
    <!-- Detect framework pack suffix and apply defaults. -->
    <PropertyGroup Condition="'$(FrameworkPackType)' == 'targeting'">
      <InstallerName>$(ShortFrameworkName)-targeting-pack</InstallerName>
      <WixProductMoniker>$(TargetingPackBrandName)</WixProductMoniker>
    </PropertyGroup>

    <PropertyGroup Condition="'$(FrameworkPackType)' == 'apphost'">
      <InstallerName>$(ShortFrameworkName)-apphost-pack</InstallerName>
      <WixProductMoniker>$(AppHostPackBrandName)</WixProductMoniker>
    </PropertyGroup>

    <!-- Runtime packs are obtained only through NuGet. -->
    <PropertyGroup Condition="'$(FrameworkPackType)' == 'runtime'">
      <BuildDebPackage>false</BuildDebPackage>
      <BuildRpmPackage>false</BuildRpmPackage>
      <GeneratePkg>false</GeneratePkg>
      <GenerateMSI>false</GenerateMSI>
    </PropertyGroup>

    <!-- Non-framework pkgproj shouldn't build MSIs. -->
    <PropertyGroup Condition="'$(FrameworkPackType)' == '' and '$(MSBuildProjectExtension)' == '.pkgproj'">
      <GenerateMSI>false</GenerateMSI>
    </PropertyGroup>

    <PropertyGroup Condition="'$(GenerateSharedFramework)' == 'true'">
      <InstallerName>$(ShortFrameworkName)-runtime</InstallerName>
      <WixProductMoniker>$(SharedFrameworkBrandName)</WixProductMoniker>
    </PropertyGroup>

    <Error
      Text="InstallerName starts with a '-': missing ShortFrameworkName value."
      Condition="$(InstallerName.StartsWith('-'))" />

    <PropertyGroup>
      <MacOSComponentName>com.microsoft.$(ShortFrameworkName).pack.$(FrameworkPackType).$(ProductVersion).component.osx.x64</MacOSComponentName>
      <MacOSSharedInstallDir>/usr/local/share/dotnet</MacOSSharedInstallDir>

      <VersionedInstallerName>$(InstallerName)-$(ProductBandVersion)</VersionedInstallerName>
      <VersionedInstallerName>$(VersionedInstallerName.ToLowerInvariant())</VersionedInstallerName>
      <InstallerPackageRelease>1</InstallerPackageRelease>

      <InstallerPackageVersion>$(ProductionVersion)</InstallerPackageVersion>
    </PropertyGroup>

    <PropertyGroup Condition="'$(InstallerExtension)' == '.deb'">
      <InstallerPackageVersion Condition="'$(IncludePreReleaseLabelInPackageVersion)' == 'true'">$(ProductionVersion)~$(VersionSuffix)</InstallerPackageVersion>
    </PropertyGroup>

    <PropertyGroup Condition="'$(InstallerExtension)' == '.rpm'">
      <InstallerPackageRelease Condition="'$(IncludePreReleaseLabelInPackageVersion)' == 'true'">0.1.$(VersionSuffix)</InstallerPackageRelease>
      <InstallerPackageRelease>$([System.String]::Copy('$(InstallerPackageRelease)').Replace('-', '_'))</InstallerPackageRelease>
    </PropertyGroup>

    <PropertyGroup>
      <InstallerIntermediatesDir>$(PackagesIntermediateDir)$(InstallerName)/$(InstallerPackageVersion)/</InstallerIntermediatesDir>

      <InstallerBuildPart>$(ProductMoniker)</InstallerBuildPart>
      <InstallerBuildPart Condition="'$(InstallerExtension)' == '.deb' or '$(InstallerExtension)' == '.rpm'"
        >$(ProductVersion)-$(TargetArchitecture)</InstallerBuildPart>

      <!-- Location to place the installer, in bin. -->
      <InstallerFileNameWithoutExtension>$(InstallerName)-$(InstallerBuildPart)</InstallerFileNameWithoutExtension>
      <InstallerFile Condition="'$(InstallerFile)' == ''">$(AssetOutputPath)$(InstallerFileNameWithoutExtension)$(InstallerExtension)</InstallerFile>
      <CompressedArchiveFile>$(AssetOutputPath)$(InstallerFileNameWithoutExtension)$(CompressedFileExtension)</CompressedArchiveFile>
    </PropertyGroup>

    <!--
      Set the directory containing contents to include in the archive (zip/tarball). This default
      means the "shared" dir is inside the archive and it can be extracted directly into the dotnet
      home dir. This allows the .NET Core Runtime archive to include files outside the "shared" dir,
      such as the host, resolver, and license files, without special handling vs. WindowsDesktop and
      ASP.NET Core sharedfx.
    -->
    <PropertyGroup>
      <SharedFrameworkArchiveSourceDir Condition="'$(SharedFrameworkArchiveSourceDir)' == ''">$(SharedFrameworkLayoutDir)</SharedFrameworkArchiveSourceDir>
    </PropertyGroup>

    <!-- Only generate installers for packs and sfxproj. -->
    <PropertyGroup Condition="'$(FrameworkPackType)' == '' and '$(GenerateSharedFramework)' != 'true'">
      <GeneratePkg>false</GeneratePkg>
      <BuildDebPackage>false</BuildDebPackage>
      <BuildRpmPackage>false</BuildRpmPackage>
      <GenerateMSI>false</GenerateMSI>
    </PropertyGroup>

    <!-- Use existing infra for non-Windows shared framework installers. -->
    <PropertyGroup Condition="'$(GenerateSharedFramework)' == 'true'">
      <GeneratePkg>false</GeneratePkg>
      <BuildDebPackage>false</BuildDebPackage>
      <BuildRpmPackage>false</BuildRpmPackage>
    </PropertyGroup>
  </Target>

  <Target Name="GetSkipBuildProps">
    <PropertyGroup>
      <!-- Avoid building a project when none of the possible BuildRIDs is the current RID. -->
      <_packageRIDInBuildRIDList Condition="'%(BuildRID.Identity)' == '$(PackageRID)'">true</_packageRIDInBuildRIDList>
      <SkipBuild Condition="'$(_packageRIDInBuildRIDList)' != 'true'">true</SkipBuild>
    </PropertyGroup>
  </Target>

  <Target Name="GetLatestCommit"
          DependsOnTargets="InitializeSourceControlInformationFromSourceControlManager">
    <PropertyGroup>
      <LatestCommit Condition="'$(LatestCommit)' == ''">$(SourceRevisionId)</LatestCommit>
    </PropertyGroup>
  </Target>

  <Target Name="ReturnLatestCommit"
          DependsOnTargets="GetLatestCommit"
          Returns="$(LatestCommit)" />

  <!-- Override pkgproj tool target to provide commit info. -->
  <Target Name="GetSyncInfo"
          DependsOnTargets="GetLatestCommit">
    <ItemGroup>
      <SyncInfoLines Include="$(LatestCommit)" />
    </ItemGroup>
  </Target>

  <Target Name="GetDefaultOrderProjectReferences">
    <ItemGroup>
      <!-- Ensure depproj has had a chance to build the platform manifest. -->
      <OrderProjectReference Include="@(PlatformManifestProjectReference)" />
    </ItemGroup>
  </Target>

  <Target Name="ResolvePlatformManifestProjectReferences"
          Condition="'@(PlatformManifestProjectReference)' != ''"
          BeforeTargets="ResolveProjectReferences">
    <MSBuild
      Projects="@(PlatformManifestProjectReference)"
      Targets="GetDataFiles"
      SkipNonexistentTargets="true">
      <Output TaskParameter="TargetOutputs" ItemName="ProjectReferenceDataFile" />
    </MSBuild>

    <ItemGroup>
      <ProjectReferencePlatformManifestFile
        Include="@(ProjectReferenceDataFile)"
        Condition="'%(ProjectReferenceDataFile.PlatformManifestFile)' == 'true'" />

      <PackageConflictPlatformManifests Include="@(ProjectReferencePlatformManifestFile)" />
    </ItemGroup>

    <Error
      Condition="'@(ProjectReferencePlatformManifestFile)' == ''"
      Text="No ProjectReferencePlatformManifestFile found in @(PlatformManifestProjectReference)" />

    <Error
      Condition="!Exists('%(ProjectReferencePlatformManifestFile.Identity)')"
      Text="ProjectReferencePlatformManifestFile does not exist: '@(ProjectReferencePlatformManifestFile)' in @(PlatformManifestProjectReference)" />
  </Target>

  <!--
    By default, shared frameworks are generated based on the package. This can be overridden by the
    project, and in the future, the runtime pack is likely to be used to assemble the sfx.
  -->
  <Target Name="GetSharedFrameworkPackageReferences"
          DependsOnTargets="GetPackageIdentity"
          Returns="@(_PackageIdentity)" />

</Project>
