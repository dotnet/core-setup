<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <PropertyGroup>
    <PreventImplementationReference Condition="'$(PackageTargetRuntime)' != ''">true</PreventImplementationReference>
    <BuildTargetPath>build/$(NETCoreAppFramework)</BuildTargetPath>
    <PlatformManifestTargetPath>$(BuildTargetPath)</PlatformManifestTargetPath>
    <FileVersionPropsTargetPath>$(BuildTargetPath)</FileVersionPropsTargetPath>

    <!--
      Instead of the crossgen'd files, get pre-crossgen files to generate the manifest with. This
      works around an issue where crossgen strips the version information.
    -->
    <GetPreCrossgenFilesForManifest>true</GetPreCrossgenFilesForManifest>
  </PropertyGroup>

  <!-- Identity / Reference package content -->
  <ItemGroup Condition="'$(PackageTargetRuntime)' == ''">
    <!-- reference RID specific packages to generate lineup -->
    <ProjectReference Include="@(RuntimeProject)" />

    <!-- references the host packages -->
    <Dependency Include="Microsoft.NETCore.DotNetHostPolicy">
       <Version>$(HostPolicyVersion)</Version>
       <TargetFramework>$(NETCoreAppFramework)</TargetFramework>
    </Dependency>

    <File Include="$(MSBuildProjectName).targets">
      <TargetPath>$(BuildTargetPath)</TargetPath>
    </File>
  </ItemGroup>

  <Target Name="GetPreCrossgenFilesFromReferences"
          DependsOnTargets="SplitProjectReferences"
          Outputs="@(_PreCrossgenFiles)">
    <MSBuild
      Targets="GetPreCrossgenFilesForManifest"
      Projects="@(_NonPkgProjProjectReference)">
      <Output
        TaskParameter="TargetOutputs"
        ItemName="_PreCrossgenFiles" />
    </MSBuild>
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
</Project>
