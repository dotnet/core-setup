<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Shared targets specific to dependency projects (depproj).
  -->

  <!-- Fetches all the file items from the packages that we want to redist -->
  <Target Name="GetFilesFromPackages">
    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' != ''">
      <!-- RID-specific: include all runtime files except files in Microsoft.TargetingPack.Private.WinRT -->
      <FilesToPackage Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' != 'Microsoft.TargetingPack.Private.WinRT'">
        <!-- ResolveNugetPackageAssets doesn't preserve the asset type (native),
             calculate it by looking for native in the path -->
        <IsNative Condition="$([System.String]::new('%(Identity)').ToLowerInvariant().Replace('\', '/').Contains('/native/'))">true</IsNative>
      </FilesToPackage>
      <FilesToPackage>
        <TargetPath Condition="'%(FilesToPackage.IsNative)' != 'true'">runtimes/$(NuGetRuntimeIdentifier)/lib/$(PackageTargetFramework)</TargetPath>
        <TargetPath Condition="'%(FilesToPackage.IsNative)' == 'true'">runtimes/$(NuGetRuntimeIdentifier)/native</TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <ItemGroup Condition="'$(NuGetRuntimeIdentifier)' == ''">
      <!-- Not RID-specific: include all reference files except files in Microsoft.TargetingPack.Private.WinRT -->
      <FilesToPackage Include="@(Reference)" Condition="'%(Reference.NuGetPackageId)' != 'Microsoft.TargetingPack.Private.WinRT'">
        <TargetPath>ref/$(PackageTargetFramework)</TargetPath>
      </FilesToPackage>

      <!-- include all doc files -->
      <_docFilesToPackage Include="%(FilesToPackage.RootDir)%(FilesToPackage.Directory)**\%(FilesToPackage.FileName).xml" />

      <FilesToPackage Include="@(_docFilesToPackage)">
        <TargetPath>ref/$(PackageTargetFramework)/%(RecursiveDir)</TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <ItemGroup Condition="'$(IncludeSourceFilesInPackage)' == 'true'">
      <!-- pick up any src our sources directory from packages contributing files -->
      <_sourcePathCandidate Include="@(FilesToPackage->'$(PackagesDir)\%(NuGetPackageId)\%(NuGetPackageVersion)\sources')" />
      <_sourcePathCandidate Include="@(FilesToPackage->'$(PackagesDir)\%(NuGetPackageId)\%(NuGetPackageVersion)\src')" />
      <_sourcePath Include="@(_sourcePathCandidate)" Condition="Exists('%(Identity)')" />
    </ItemGroup>

    <!-- Add versions file with the hashes of the repos we consume -->
    <ItemGroup>
      <FilesToPackage Include="$(IntermediateOutputPath)\$(FrameworkPackageName).versions.txt">
        <TargetPath></TargetPath>
      </FilesToPackage>
    </ItemGroup>

    <!-- on windows workaround max-path -->
    <!-- this can be removed once we build on core MSBuild which supports long paths. -->
    <ItemGroup Condition="'$(OsEnvironment)'=='Windows_NT'">
      <!-- choose a shorter path name, excluding package version -->
      <_shortSourcePath Include="@(_sourcePath->'$(ObjDir.Replace('/', '\'))src-%(NuGetPackageId)')">
        <Original>%(_sourcePath.FullPath)</Original>
      </_shortSourcePath>
      <_sourcePath Remove="@(_sourcePath)" />
      <_sourcePath Include="@(_shortSourcePath)" />
    </ItemGroup>
    <RemoveDir Condition="'@(_shortSourcePath)' != '' AND Exists('%(_shortSourcePath.Identity)')" Directories="%(_shortSourcePath.Identity)" />
    <Exec Condition="'@(_shortSourcePath)' != ''" Command="mklink /J %(_shortSourcePath.Identity) %(_shortSourcePath.Original)" />

    <ItemGroup>
      <FilesToPackage Include="%(_sourcePath.Identity)\%2A%2A\%2A.%2A">
        <TargetPath>src</TargetPath>
        <IsSourceCodeFile>true</IsSourceCodeFile>
      </FilesToPackage>
    </ItemGroup>
  </Target>

  <Target Name="GetFilesToPackage"
          DependsOnTargets="ResolveNuGetPackages;GetFilesFromPackages"
          Returns="@(FilesToPackage)" />

  <Target Name="GetDependenciesToPackage"
          Condition="'@(DependenciesToPackage)' != ''"
          DependsOnTargets="ResolveNuGetPackages"
          Returns="@(_DependenciesToPackageWithVersion)">
    <ItemGroup>
      <!-- intersect ReferencedPackage with DependenciesToPackage -->
      <_DependenciesToPackageWithVersion Include="@(PackageReference)" Condition="'@(PackageReference)' == '@(DependenciesToPackage)' AND '%(Identity)' != ''">
        <TargetFramework>$(PackageTargetFramework)</TargetFramework>
      </_DependenciesToPackageWithVersion>
    </ItemGroup>

    <Message Importance="low" Text="%(_DependenciesToPackageWithVersion.Identity) : %(_DependenciesToPackageWithVersion.Version) : %(_DependenciesToPackageWithVersion.TargetFramework)" />
  </Target>

  <!-- Creates the *.versions.txt file describing where data in this package came from. -->
  <Target Name="GenerateHashVersionsFile" DependsOnTargets="GetDependencyVersionFiles">
    <ItemGroup>
      <DependencyVersionFile Content="$([System.IO.File]::ReadAllText('%(Identity)').Trim())" />

      <_VersionsFileLines Include="core-setup $(LatestCommit)" />
      <_VersionsFileLines Include="@(DependencyVersionFile ->'%(Name) %(Content)')" />
    </ItemGroup>

    <WriteLinesToFile Lines="@(_VersionsFileLines)"
                       File="$(IntermediateOutputPath)\$(FrameworkPackageName).versions.txt"
                       Overwrite="true"/>
  </Target>

  <!-- Target overrides (can't be shared with pkgproj) -->

  <Target Name="Build" DependsOnTargets="GenerateHashVersionsFile;GetFilesToPackage" />

  <!-- remove when fixing https://github.com/dotnet/buildtools/issues/1273 -->
  <Target Name="DetermineRuntimeDependencies" />

</Project>
